.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CopyTree::VendorProof::LocalFileOp 3pm"
.TH CopyTree::VendorProof::LocalFileOp 3pm "2011-09-20" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CopyTree::VendorProof::LocalFileOp \- Perl extension for providing a connecter instance for CopyTree::VendorProof.
.PP
This module provides CopyTree::VendorProof a connector instance with methods to deal with local file operations.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use CopyTree::VendorProof::LocalFileOp;
.Ve
.PP
To create a LocalFileOp connector instance:
.PP
.Vb 1
\&        my $lcfo_inst = CopyTree::VendorProof::LocalFileOp \->new;
.Ve
.PP
To add a source or destination item to a CopyTree::VendorProof instance:
.PP
.Vb 4
\&        my $ctvp_inst = CopyTree::VendorProof \->new;
\&        $ctvp_inst \->src (\*(Aqsome_source_path_of_local_file_system\*(Aq, $lcfo_inst);
\&        $ctvp_inst \->dst (\*(Aqsome_destination_path_of_local_file_system\*(Aq, $lcfo_inst);
\&        $ctvp_inst \->cp;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
CopyTree::VendorProof::LocalFileOp does nothing flashy \- it merely provides an instance and local file operation methods for its parent class, CopyTree::VendorProof.
.PP
The methods provided in this connector objects include:
.Sp
.Vb 9
\&        new
\&        fdls                            
\&        is_fd
\&        read_info_memory
\&        write_from_memory
\&        copy_local_files
\&        cust_mkdir
\&        cust_rmdir
\&        cust_rmfile
.Ve
.PP
The functionality of these methods are descripbed in 
perldoc CopyTree::VendorProof and 
perldoc CopyTree::VendorProof::LocalFileOp
.SH "Instance Methods"
.IX Header "Instance Methods"
Since these are class methods, the first item from \f(CW@_\fR is the instance itself, and should be stored in \f(CW$inst\fR, or whatever you'd like to call it.
.SS "0. new"
.IX Subsection "0. new"
.Vb 1
\&        which takes no arguments, but blesses an anonymous hash into the data connection object and returns it
.Ve
.SS "1. fdls"
.IX Subsection "1. fdls"
.Vb 8
\&        which takes two arguments:
\&                an option ($lsoption) that\*(Aqs one of \*(Aqf\*(Aq, \*(Aqd\*(Aq, \*(Aqfdarrayrefs\*(Aq, or \*(Aq\*(Aq
\&                and a directory path $startpath.
\&                The lsoption is passed to the SUPER class fdls_ret, and is not handled at this level.
\&        This method will generate @files and @dirs, which are lists of files and directories that start with $startpath,
\&        And return $self \-> SUPER::fdls_ret ($lsoption, \e@files, \e@dirs),
\&        which is ultimately a listing of the directory content, being one of
\&                @files, @dirs, (\e@files, \e@dirs), or  @files_and_dirs) depending on the options being \*(Aqf\*(Aq, \*(Aqd\*(Aq, \*(Aqfdarrayrefs\*(Aq or \*(Aq\*(Aq
.Ve
.SS "2. is_fd"
.IX Subsection "2. is_fd"
.Vb 5
\&        which takes a single argument of a file or dir $path,
\&        and returns \*(Aqd\*(Aq for directory, 
\&                \*(Aqf\*(Aq for file,
\&                \*(Aqpd\*(Aq for non\-existing, but has a valid parent dir,
\&                \*(Aq0\*(Aq for non of the above.
.Ve
.SS "3. read_into_memory"
.IX Subsection "3. read_into_memory"
.Vb 3
\&        which takes the $sourcepath of a file, 
\&        and reads (slurps) it into a scalar $binfile #preferably in binmode,
\&        and returns it as \e$binfile
.Ve
.SS "4. write_from_memory"
.IX Subsection "4. write_from_memory"
.Vb 3
\&        which takes the reference to a scalar $binfile (\e$binfile)  PLUS 
\&        a destination path, and writes the scalar to the destination.
\&        no return is necessary
.Ve
.SS "5. copy_local_files"
.IX Subsection "5. copy_local_files"
.Vb 4
\&        which takes the $source and $destination files on the same file system, 
\&        and copies from $source to $destination.  No return is necessary.  This 
\&        method is included such that entirely remote operations may transfer faster,
\&        without an intermediate \*(Aqdownload to local machine\*(Aq step.
.Ve
.SS "6. cust_mkdir"
.IX Subsection "6. cust_mkdir"
.Vb 2
\&        which takes a $dirpath and creates the dir.  If the parent of $dirpah
\&        does not exist, give a warning and do not do anything
.Ve
.SS "7. cust_rmdir"
.IX Subsection "7. cust_rmdir"
.Vb 3
\&        which takes a $dirpath and removes the entire dir tree from $dirpath
\&        croaks / dies if $dirpath is not a dir. No return is necessary.
\&        To make things easier, when writing this method, use
\&
\&        my ($filesref, $dirsref) = $inst \-> ls_tree_fdret( $dirpath, $inst \-> ls_tree($dirpath);
\&
\&        to get array references of @files and @dirs under $dirpath
\&        Note: ls_tree and ls_tree_fdret uses fdls, and are parent classes in CopyTree::VendorProof
.Ve
.SS "8. cust_rmfile"
.IX Subsection "8. cust_rmfile"
.Vb 2
\&        which takes a $filepath and removes it.
\&        croaks / dies if $file is not a file.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CopyTree::VendorProof
SharePoint::SOAPHandler
.SH "AUTHOR"
.IX Header "AUTHOR"
dbmolester, dbmolester de gmail.com
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011 by dbmolester
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.
