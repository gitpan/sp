.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CopyTree::VendorProof 3pm"
.TH CopyTree::VendorProof 3pm "2011-09-20" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CopyTree::VendorProof \- Perl extension for a generic interface to inplement a copy method between [a local computer and a remote file system] or [a remote file system and itself] or [local computer to local computer]. An example remote system would be Microsoft's Sharepoint file storeage, which takes commands via https
.PP
The supported (very basic) copy funtionalities mimics the unix cp \-rf command \- copies SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use CopyTree::VendorProof;
\&        my $cpobj = CopyTree::VendorProof\->new;
\&        my $sharepointobj = SharePoint::SOAPHandler \->new; 
\&        my $localfileobj = CopyTree::VendorProof::LocalFileOp \->new;
\&
\&        $sharepointobj \->sp_creds_domain(\*(Aqspserver.spdomain.org:443\*(Aq); #do not include protocal (\*(Aqhttps://\*(Aq)
\&        $sharepointobj \->sp_creds_user(\*(AqDOMAIN_NAME_CAPS\eusername\*(Aq);
\&        $sharepointobj \->sp_creds_password(\*(Aqch1ckens\*(Aq);
\&        $sharepointobj \->sp_authorizedroot(\*(Aqhttps://spserver.spdomain.org:443/someroot/dir_under_which_Shared_Documents_appear\*(Aq); 
\&        
\&        $cpobj \-> src(\*(AqShared Documents/somedir\*(Aq, $sharepointobj);#SOAPHandler objects always takes Shared Documents/ as start of a path
\&        $cpobj \-> src(\*(AqShared Documents/somefile\*(Aq, $sharepointobj);#SOAPHandler objects always takes Shared Documents/ as start of a path
\&        $cpobj \-> src(\*(Aq/home/username/Documents/somedir\*(Aq, $localfileobj);
\&        $cpobj \-> dst(\*(Aq/home/username/Documents\*(Aq, $localfileobj);
\&        $cpobj \->cp;
\&        $cpobj \->reset; #clears all src and dst
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a generic interface to inplement a copy method between [a local computer and a remote file system] or [a remote file system and itself] or [local computer to local computer].
.PP
The supported (very basic) copy funtionalities mimics the unix cp command \- copies \s-1SOURCE\s0 to \s-1DEST\s0, or multiple \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0.
.PP
This whole project arose when I needed to automate file transfers between a locally mounted file system (be it just local files or samba) and a remote Microsoft Sharepoint server.  Since at the time of writing (mid 2011), there wasn't a way to locally mount Sharepoint directories that's connected through https, I'd decided to write connector modules for it.  Half way down the process, it occurred to me that this will not be the last time some vendor provides a stupid interface for their services, so I reorganized this module to be adaptable to changes \- as long as I can establish some basic functions of single file transfer, I can plug this module in and do more complex stuff such as copy entire directories.
.PP
This adaptablity resulted in the semi complex model used to invoke a copy.  You basically need at least 2 objects for copy to work.  You need this module (CopyTree::VendorProof) to provide a base class to copy stuff with, but you also need at least one more module to provide data connection methods for retrieving a file, posting a file, listing a directory, and doing some sort of file tests for each protocol (be it a protocol for local file operations or a protocol for sharepoint operations).  In other words, you need an extra module per protocol, so if you want to copy from local to sharepoint, you need to load CopyTree::VendorProof::LocalFileOp (which I wrote) \s-1AND\s0 SharePoint::SOAPHandler (which I also wrote).  You would add sources and destinations of files you wish to copy via \f(CW$vendorproof_instance\fR \->src ($path, \f(CW$connector_instance\fR) and \f(CW$vendorproof_instance\fR \->dst($destinationpath, \f(CW$another_connector_instance\fR).  Once you've added all your sources, you would then run \f(CW$vendorproof_instance\fR \->cp; which would complete the copy operation as per your src, dst definitions.
.PP
The copy schemes are similar to unix' cp \-rf ; i.e. copies \s-1SOURCE\s0 to \s-1DEST\s0, or multiple \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0.
Noting that:
.PP
.Vb 2
\&   directory copies are recursive, and 
\&   all copies are default overwrite
.Ve
.PP
The primary use of this module is on a linux / unix system that needs to interact with a remote system.
.SH "VendorProof Class Methods"
.IX Header "VendorProof Class Methods"
The methods provided in this module (base class) include:
.SS "new"
.IX Subsection "new"
.Vb 2
\&                my $ctvp_inst = CopyTree::VendorProof \->new;
\&                creates a new VendorProof object instance
.Ve
.SS "reset"
.IX Subsection "reset"
.Vb 2
\&                $ctvp_inst \->reset;
\&                clears any previously set sources and destinations, retuns the instance.
.Ve
.SS "src"
.IX Subsection "src"
.Vb 3
\&                $ctvp_inst \->src($path, $path_instance)
\&                adds a source and the connector instance of said source
\&                you may add multiple sources by invoking this multiple times
.Ve
.SS "dst"
.IX Subsection "dst"
.Vb 2
\&                $ctvp_inst \->dst($dstpath, $dstpath_instance)
\&                adds a destination and its connector instance
.Ve
.SS "cp"
.IX Subsection "cp"
.Vb 2
\&                $ctvp_inst \->cp;
\&                starts copy operation based on the $ctvp_inst\->src and $ctvp_inst\->dst that\*(Aqs initiated
.Ve
.SS "copy_meth_deci"
.IX Subsection "copy_meth_deci"
.Vb 1
\&                internal method \- if source and destination are using the same object (for example, both on sharepoint), do not use the local memory as an intermediate data cache
.Ve
.SS "ls_tree"
.IX Subsection "ls_tree"
.Vb 2
\&                $ctvp_inst \->ls_tree($path)
\&                returns a hash ref of the tree structure under $path, which files are undef, and dirs are references to yet another anonymous hash
.Ve
.ie n .SS "ls_tree_fdret ( $root_path_name, $hashref)"
.el .SS "ls_tree_fdret ( \f(CW$root_path_name\fP, \f(CW$hashref\fP)"
.IX Subsection "ls_tree_fdret ( $root_path_name, $hashref)"
.Vb 1
\&                takes a $root_path_name and the $hashref returned from a previous $ctvp\->ls_tree and returns (\e@files, \e@dirs) with the $root_path_name added on as the parent of these @files and @dirs
.Ve
.SS "path"
.IX Subsection "path"
.Vb 1
\&                This is not used by the VendorProof instance.  Instead, it provides a base class for connector instances to use to set a $path variable.  Not really used and not extensively tested.
.Ve
.SS "fdls_ret"
.IX Subsection "fdls_ret"
.Vb 1
\&                This method is provided as a base class for connector instances to use.  It provides common code for fdls methods from different connector objects.
\&        
\&        Of the aformentioned methods, new, path, and reset are the only methods that do not require additional connector objects to function, although path has the sole function of providing a base class to connector objects.
.Ve
.SH "Object specific instance methods for the base class CopyTree::VendorProof:"
.IX Header "Object specific instance methods for the base class CopyTree::VendorProof:"
Before you start involking CopyTree::VendorProof \->new, you'd better set up class instances for your source(s) and destination.  These class instances will provide class specific methods for file operations, which CopyTree::VendorProof relies on to carry out the cp \-rf functionality. Since these are class methods, the first item from \f(CW@_\fR is the instance itself, and should be stored in \f(CW$inst\fR, or whatever you'd like to call it.  The required class methods are described below (note that unless you're writing connecters other than CopyTree::VendorProof::LocalFileOp or SharePoint::SOAPHandler, you will not need to know them):
.SS "0. new"
.IX Subsection "0. new"
.Vb 1
\&        which takes no arguments, but blesses an anonymous hash into the data connection object and returns it
.Ve
.SS "1. fdls"
.IX Subsection "1. fdls"
.Vb 8
\&        which takes two arguments:
\&                an option ($lsoption) that\*(Aqs one of \*(Aqf\*(Aq, \*(Aqd\*(Aq, \*(Aqfdarrayrefs\*(Aq, or \*(Aq\*(Aq
\&                and a directory path $startpath.
\&                The lsoption is passed to the SUPER class fdls_ret, and is not handled at this level.
\&        This method will generate @files and @dirs, which are lists of files and directories that start with $startpath,
\&        And return $self \-> SUPER::fdls_ret ($lsoption, \e@files, \e@dirs),
\&        which is ultimately a listing of the directory content, being one of
\&                @files, @dirs, (\e@files, \e@dirs), or  @files_and_dirs) depending on the options being \*(Aqf\*(Aq, \*(Aqd\*(Aq, \*(Aqfdarrayrefs\*(Aq or \*(Aq\*(Aq
.Ve
.SS "2. is_fd"
.IX Subsection "2. is_fd"
.Vb 5
\&        which takes a single argument of a file or dir $path,
\&        and returns \*(Aqd\*(Aq for directory, 
\&                \*(Aqf\*(Aq for file,
\&                \*(Aqpd\*(Aq for non\-existing, but has a valid parent dir,
\&                \*(Aq0\*(Aq for non of the above.
.Ve
.SS "3. read_into_memory"
.IX Subsection "3. read_into_memory"
.Vb 3
\&        which takes the $sourcepath of a file, 
\&        and reads (slurps) it into a scalar $binfile #preferably in binmode,
\&        and returns it as \e$binfile
.Ve
.SS "4. write_from_memory"
.IX Subsection "4. write_from_memory"
.Vb 3
\&        which takes the reference to a scalar $binfile (\e$binfile)  PLUS 
\&        a destination path, and writes the scalar to the destination.
\&        no return is necessary
.Ve
.SS "5. copy_local_files"
.IX Subsection "5. copy_local_files"
.Vb 4
\&        which takes the $source and $destination files on the same file system, 
\&        and copies from $source to $destination.  No return is necessary.  This 
\&        method is included such that entirely remote operations may transfer faster,
\&        without an intermediate \*(Aqdownload to local machine\*(Aq step.
.Ve
.SS "6. cust_mkdir"
.IX Subsection "6. cust_mkdir"
.Vb 2
\&        which takes a $dirpath and creates the dir.  If the parent of $dirpah
\&        does not exist, give a warning and do not do anything
.Ve
.SS "7. cust_rmdir"
.IX Subsection "7. cust_rmdir"
.Vb 3
\&        which takes a $dirpath and removes the entire dir tree from $dirpath
\&        croaks / dies if $dirpath is not a dir. No return is necessary.
\&        To make things easier, when writing this method, use
\&
\&        my ($filesref, $dirsref) = $inst \-> ls_tree_fdret( $dirpath, $inst \-> ls_tree($dirpath);
\&
\&        to get array references of @files and @dirs under $dirpath
\&        Note: ls_tree and ls_tree_fdret uses fdls, and are parent classes in CopyTree::VendorProof
.Ve
.SS "8. cust_rmfile"
.IX Subsection "8. cust_rmfile"
.Vb 2
\&        which takes a $filepath and removes it.
\&        croaks / dies if $file is not a file.
.Ve
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Check out CopyTree::VendorProof::LocalFileOp and SharePoint::SOAPHandler.
.SH "AUTHOR"
.IX Header "AUTHOR"
dbmolester, dbmolester de gmail.com<gt>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011 by dbmolester
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.
